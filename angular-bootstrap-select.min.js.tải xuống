angular.module("angular-bootstrap-select.extra", []).directive("toggle", function () {
	return {
		restrict: "A",
		link: function (a, b) {
			var c = b.parent();
			b.bind("click", function () {
				c.toggleClass("open")
			}),
				b.next().find("li").bind("click", function () {
					c.toggleClass("open")
				})
		}
	}
}),
	angular.module('angular-bootstrap-select', []).directive('selectpicker', function () {
		return {
			restrict: 'A',
			link: function (scope, element, attrs) {
				element = $(element);
				//custom code by ddtung to add input to the last option to add option to select -.-, IOT-61
				if(attrs.hasOwnProperty("addnew") && typeof attrs["addnew"] === "string") {
					var content = "<input type='text' class='bss-input' onKeyDown='event.stopPropagation();' onKeyPress='addSelectInpKeyPress(this,event)' onClick='event.stopPropagation()' placeholder='"+attrs["addnew"]+"'>";
					
					var divider = $('<option/>')
						.addClass('divider')
						.data('divider', true);
					
					var addoption = $('<option/>', {class: 'addItem'})
						.data('content', content)
					
					if(element.length > 0) {
						element.append(divider)
							.append(addoption).selectpicker(scope.selectpickerOpt);
						element.selectpicker('refresh');
					}
				}//end custom code, to revert the original code, just remove if block code
				else {
					if(element.length > 0) {
						element.selectpicker(scope.selectpickerOpt);
						element.selectpicker('refresh');
					}
				}
				//
				
				
				scope.$watch(attrs.ngModel, function (newVal, oldVal) {
					scope.$parent[attrs.ngModel] = newVal;
					scope.$evalAsync(function () {
						if(!attrs.ngOptions || /track by/.test(attrs.ngOptions)) element.val(newVal);
						element.selectpicker('refresh');
					});
				});
				
				scope.$on('$destroy', function () {
					scope.$evalAsync(function () {
						element.selectpicker('destroy');
					});
				});
			}
		};
	});

function addSelectItem(t,ev)
{
	ev.stopPropagation();
	
	var bs = $(t).closest('.bootstrap-select')
	var txt=bs.find('.bss-input').val().replace(/[|]/g,"");
	var txt=$(t).prev().val().replace(/[|]/g,"");
	if ($.trim(txt)=='') return;
	
	// Changed from previous version to cater to new
	// layout used by bootstrap-select.
	var p=bs.find('select');
	var o=$('option', p).eq(-2);
	o.before( $("<option>", { "selected": true, "text": txt}) );
	p.selectpicker('refresh');
}

function addSelectInpKeyPress(t,ev)
{
	ev.stopPropagation();
	
	// do not allow pipe character
	if (ev.which==124) ev.preventDefault();
	
	// enter character adds the option
	if (ev.which==13)
	{
		ev.preventDefault();
		addSelectItem($(t).next(),ev);
	}
}